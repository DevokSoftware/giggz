openapi: 3.0.0
info:
  title: API Documentation
  version: 1.0.0
servers:
  - url: http://localhost:8080/api
tags:
  - name: Event
paths:
  /comedians:
    get:
      tags:
        - Comedian
      parameters:
        - in: query
          name: pageable
          required: false
          schema:
            $ref: '#/components/schemas/Pageable'
        - in: query
          name: filters
          required: false
          allowReserved: true
          style: form
          explode: true
          schema:
            type: object
            properties:
              name:
                type: string
      responses:
        200:
          description: All existing comedians
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageComedianResponse'
    post:
      tags:
        - Comedian
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateComedianRequest'
        required: true
      responses:
        201:
          description: Comedian created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComedianResponse'
  /comedians/{comedianId}:
    get:
      tags:
        - Comedian
      parameters:
        - name: comedianId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
        - name: thumbnail
          in: query
          required: false
          schema:
            type: boolean
            default: false
      responses:
        201:
          description: Existing comedian
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComedianResponse'
    put:
      tags:
        - Comedian
      parameters:
        - name: comedianId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateComedianRequest'
        required: true
      responses:
        201:
          description: Comedian updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComedianResponse'
    delete:
      tags:
        - Comedian
      parameters:
        - name: comedianId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        200:
          description: Comedian deleted
  /comedians/{comedianId}/events:
    get:
      tags:
        - Comedian
      parameters:
        - name: comedianId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
        - in: query
          name: pageable
          required: false
          schema:
            $ref: '#/components/schemas/Pageable'
        - in: query
          name: filters
          required: false
          allowReserved: true
          style: form
          explode: true
          schema:
            type: object
            properties:
              dateFrom:
                type: string
                format: date-time
              dateTo:
                type: string
                format: date-time
      responses:
        200:
          description: All existing comedian events
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageComedianEventsResponse'
  /comedians/{comedianId}/favorite:
    post:
      tags:
        - Comedian
      parameters:
        - name: comedianId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                isFavorite:
                  type: boolean
        required: true
      responses:
        200:
          description: Favorite comedian added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComedianResponse'
  /events:
    post:
      tags:
        - Event
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEventRequest'
        required: true
      responses:
        201:
          description: New event created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventResponse'
    get:
      tags:
        - Event
      parameters:
        - in: query
          name: pageable
          required: false
          schema:
            $ref: '#/components/schemas/Pageable'
        - in: query
          name: filters
          required: false
          style: form
          explode: true
          schema:
            type: object
            properties:
              name:
                type: string
              city:
                type: string
              comedianId:
                type: integer
                format: int64
              dateFrom:
                type: string
                format: date-time
              dateTo:
                type: string
                format: date-time
              standupId:
                type: integer
                format: int64
      responses:
        200:
          description: All existing events
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageEventResponse'
  /events/{eventId}:
    get:
      tags:
        - Event
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        201:
          description: Existing event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventResponse'
    put:
      tags:
        - Event
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEventRequest'
        required: true
      responses:
        201:
          description: Event updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventResponse'
    delete:
      tags:
        - Event
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        200:
          description: Event deleted
  /events/{eventId}/attended:
    post:
      tags:
        - Event
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                isAttended:
                  type: boolean
        required: true
      responses:
        200:
          description: Event attended
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventResponse'
  /events/trending:
    get:
      tags:
        - Event
      responses:
        200:
          description: Trending events
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrendingEventsResponse'
  /locations:
    post:
      tags:
        - Location
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocationInput'
        required: true
      responses:
        201:
          description: New location created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
    get:
      tags:
        - Location
      parameters:
        - in: query
          name: filters
          required: false
          schema:
            type: object
            properties:
              name:
                type: string
              city:
                type: string
      responses:
        200:
          description: All existing locations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Location'
  /locations/{locationId}:
    get:
      tags:
        - Location
      parameters:
        - name: locationId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        201:
          description: Existing location
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
    put:
      tags:
        - Location
      parameters:
        - name: locationId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocationInput'
        required: true
      responses:
        201:
          description: Location updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
    delete:
      tags:
        - Location
      parameters:
        - name: locationId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        200:
          description: Location deleted
  /standups:
    post:
      tags:
        - Standup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StandupInput'
        required: true
      responses:
        201:
          description: New stand-up created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Standup'
    get:
      tags:
        - Standup
      responses:
        200:
          description: All existing stand-ups
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Standup'
  /standups/{standupId}:
    get:
      tags:
        - Standup
      parameters:
        - name: standupId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        200:
          description: Existing stand-up
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Standup'
    put:
      tags:
        - Standup
      parameters:
        - name: standupId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StandupInput'
        required: true
      responses:
        201:
          description: Stand-up updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Standup'
    delete:
      tags:
        - Standup
      parameters:
        - name: standupId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        200:
          description: Stand-up deleted
  /news:
    get:
      tags:
        - News
      responses:
        200:
          description: All the recent news among new standups, stand up specials, etc
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/NewsResponse'
  /auth/login:
    post:
      tags:
        - Authentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JwtToken'
  /auth/signup:
    post:
      tags:
        - Authentication
      summary: "Register a new user"
      description: "Create a new user account with email and password."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignupRequest"
      responses:
        '200':
          description: "User registered successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User registered successfully!"
        '400':
          description: "Bad request"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email is already in use."
        '500':
          description: "Server error"
  /auth/validateToken:
    get:
      summary: Validate JWT token
      description: Validates the provided JWT token to check if it's valid and not expired.
      operationId: validateToken
      tags:
        - Authentication
      parameters:
        - name: Authorization
          in: header
          required: true
          description: Bearer token to be validated.
          schema:
            type: string
            example: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      responses:
        200:
          description: Token is valid
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Token is valid"
        401:
          description: Invalid or expired token
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid token"
  /auth/refresh:
    post:
      summary: Refresh Access Token
      description: Refresh the access token using a valid refresh token.
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JwtToken'
        '401':
          description: Invalid or expired refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users/{userId}/profile:
    get:
      summary: Get User Profile
      description: Retrieve the authenticated user's profile information.
      tags:
        - User
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: Successfully retrieved user profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          description: Unauthorized (invalid or missing token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users/{userId}/comedians/favorites:
    get:
      summary: Get favorite comedians by user
      description: Retrieve all the user's favorite comedians
      tags:
        - User
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: Successfully retrieved user's favorite comedians
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ComedianResponse'
        '401':
          description: Unauthorized (invalid or missing token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users/{userId}/events/attended:
    get:
      summary: Get Events attended by user
      description: Retrieve all the Events attended by the user
      tags:
        - User
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: Successfully retrieved Events attended by the user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventResponse'
        '401':
          description: Unauthorized (invalid or missing token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /me/events/attended:
    get:
      summary: Get Events attended by logged user
      description: Retrieve all the Events attended by logged user
      tags:
        - User
      security:
        - bearerAuth: [ ] # Requires bearer token for authentication
      responses:
        '200':
          description: Successfully retrieved events attended by logged user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventResponse'
        '401':
          description: Unauthorized (invalid or missing token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /me/profile:
    get:
      summary: Get logged user's profile
      description: Retrieve the authenticated user's profile information.
      tags:
        - User
      security:
        - bearerAuth: [ ] # Requires bearer token for authentication
      responses:
        '200':
          description: Successfully retrieved logged user's profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          description: Unauthorized (invalid or missing token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /me/comedians/favorites:
    get:
      summary: Get favorite comedians by logged user
      description: Retrieve all the favorite Comedians of the logged user
      tags:
        - User
      security:
        - bearerAuth: [ ] # Requires bearer token for authentication
      responses:
        '200':
          description: Successfully retrieved favorite Comedians of the logged user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ComedianResponse'
        '401':
          description: Unauthorized (invalid or missing token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /feed:
    get:
      tags:
        - Feed
      parameters:
        - in: query
          name: pageable
          required: false
          schema:
            $ref: '#/components/schemas/Pageable'
      responses:
        200:
          description: Get the feed with the last content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageFeedResponse'

components:
  schemas:
    CreateEventRequest:
      title: CreateEventRequest
      required:
        - name
      type: object
      properties:
        name:
          type: string
        date:
          type: string
          format: date-time
        description:
          type: string
        poster:
          type: string
        price:
          type: number
        url:
          type: string
        locationId:
          type: string
        standupId:
          type: string
        comedianIds:
          type: array
          items:
            type: string
    UpdateEventRequest:
      title: UpdateEventRequest
      type: object
      properties:
        name:
          type: string
        date:
          type: string
          format: date-time
        description:
          type: string
        poster:
          type: string
        price:
          type: number
        url:
          type: string
        locationId:
          type: string
        standupId:
          type: string
        comedianIds:
          type: array
          items:
            type: string
    ContentInput:
      title: ContentInput
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        contentType:
          $ref: '#/components/schemas/ContentType'
        url:
          type: string
        isTrending:
          type: boolean
    ContentResponse:
      title: ContentResponse
      required:
        - id
        - contentType
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        contentType:
          $ref: '#/components/schemas/ContentType'
        url:
          type: string
        isTrending:
          type: boolean
        thumbnail:
          type: string
    NewsContent:
      title: NewsContent
      required:
        - id
        - contentType
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        contentType:
          $ref: '#/components/schemas/ContentType'
        url:
          type: string
        comedians:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              name:
                type: string
              picture:
                type: string
    ContentType:
      type: string
      enum:
        - SPOTIFY
        - PATREON
        - YOUTUBE
    SourceType:
      type: string
      enum:
        - SPOTIFY
        - YOUTUBE
    PageEventResponse:
      title: PageEventResponse
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/EventResponse'
        totalElements:
          type: integer
        totalPages:
          type: integer
    PageComedianResponse:
      title: PageComedianResponse
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/ComedianResponse'
        totalElements:
          type: integer
        totalPages:
          type: integer
    EventResponse:
      title: EventResponse
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        date:
          type: string
          format: date-time
        description:
          type: string
        poster:
          type: string
        price:
          type: number
        url:
          type: string
        location:
          $ref: '#/components/schemas/Location'
        comedians:
          type: array
          items:
            $ref: '#/components/schemas/EventComedianResponse'
        standup:
          $ref: '#/components/schemas/Standup'
        attendedByLoggedUser:
          type: boolean
    ComedianEventResponse:
      title: ComedianEventResponse
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        date:
          type: string
          format: date-time
        description:
          type: string
        poster:
          type: string
        price:
          type: number
        url:
          type: string
        location:
          $ref: '#/components/schemas/Location'
        standup:
          $ref: '#/components/schemas/Standup'
        attendedByLoggedUser:
          type: boolean
    Location:
      title: Location
      required:
        - id
        - name
        - city
      properties:
        id:
          type: string
        name:
          type: string
        city:
          type: string
        number:
          type: string
        street:
          type: string
    LocationInput:
      title: Location
      required:
        - name
        - city
      properties:
        name:
          type: string
        city:
          type: string
        number:
          type: string
        street:
          type: string
    EventComedianResponse:
      title: EventComedianResponse
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        picture:
          type: string
    CreateComedianRequest:
      title: CreateComedianRequest
      required:
        - name
      type: object
      properties:
        name:
          type: string
        picture:
          type: string
        instagram:
          type: string
        youtube:
          type: string
        tiktok:
          type: string
        twitter:
          type: string
        contents:
          type: array
          items:
            $ref: '#/components/schemas/ContentInput'
    UpdateComedianRequest:
      title: UpdateComedianRequest
      type: object
      properties:
        name:
          type: string
        picture:
          type: string
        instagram:
          type: string
        youtube:
          type: string
        tiktok:
          type: string
        twitter:
          type: string
        contents:
          type: array
          items:
            $ref: '#/components/schemas/ContentInput'
        inactive:
          type: boolean
    ComedianResponse:
      title: ComedianResponse
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        city:
          type: string
        picture:
          type: string
        instagram:
          type: string
        youtube:
          type: string
        tiktok:
          type: string
        twitter:
          type: string
        contents:
          type: array
          items:
            $ref: '#/components/schemas/ContentResponse'
        inactive:
          type: boolean
        favoriteOfLoggedUser:
          type: boolean
    Standup:
      title: Standup
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        poster:
          type: string
        comedian:
          type: object
          properties:
            id:
              type: string
            name:
              type: string
            picture:
              type: string
        isTrending:
          type: boolean
    StandupInput:
      title: StandupInput
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        poster:
          type: string
        comedianId:
          type: string
        isTrending:
          type: boolean
    PageComedianEventsResponse:
      title: PageComedianEventsResponse
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/ComedianEventResponse'
        totalElements:
          type: integer
        totalPages:
          type: integer
    Pageable:
      description: Pageable query parameters
      type: object
      properties:
        page:
          type: integer
          default: 0
        size:
          type: integer
          default: 10
    Page:
      description: Pageable query parameters
      type: object
      properties:
        total:
          type: integer
          default: 0
        content:
          type: object
    LoginRequest:
      title: LoginRequest
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
        password:
          type: string
    JwtToken:
      title: JwtToken
      type: object
      required:
        - accessToken
        - refreshToken
      properties:
        accessToken:
          type: string
          description: The newly generated access token.
        refreshToken:
          type: string
          description: The refresh token (in case it was rotated).
    TokenRefreshRequest:
      type: object
      properties:
        refreshToken:
          type: string
          description: The refresh token used to request a new access token.
      required:
        - refreshToken
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Description of the error that occurred.
    UserProfile:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the user.
        email:
          type: string
          description: The email of the user.
        firstName:
          type: string
          description: The first name of the user.
        lastName:
          type: string
          description: The last name of the user.
        createdAt:
          type: string
          format: date-time
          description: The timestamp when the user account was created.
      required:
        - id
        - email
        - name
        - createdAt
    SignupRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Smith"
        password:
          type: string
          format: password
          example: "password123"
    TrendingEventsResponse:
      type: array
      items:
        $ref: '#/components/schemas/EventResponse'
    NewsResponse:
      title: NewsResponse
      type: object
      properties:
        standups:
          type: array
          items:
            $ref: '#/components/schemas/Standup'
        youtube:
          type: array
          items:
            $ref: '#/components/schemas/NewsContent'
        podcasts:
          type: array
          items:
            $ref: '#/components/schemas/NewsContent'
    PageFeedResponse:
      title: PageFeedResponse
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/FeedContentResponse'
        totalElements:
          type: integer
        totalPages:
          type: integer
    FeedContentResponse:
      title: FeedContentResponse
      required:
        - source
        - url
        - thumbnailUrl
        - title
        - publishDate
        - duration
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        source:
          $ref: '#/components/schemas/SourceType'
        url:
          type: string
        thumbnailUrl:
          type: string
        publishDate:
          type: string
          format: date-time
        duration:
          type: integer
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT